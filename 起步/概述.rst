胶水语言
============
- `shell <https://www.cnblogs.com/hanggegege/p/5776757.html>`_
- perl
- python
    - 借助 **C** 语言接口，几乎可以驱动所有已知的软件、模块
    - 只要能找到一个开源的库，安装后就可以驱动软件、模块
    - 数据库、网络、互联网、图形、游戏、科学计算、GUI、OA、自动控制，甚至宇航员都在用


动/静态
==============
============  =========================  =========
特性             动态语言                    静态语言
============  =========================  =========
e.g.            ``python, javascript``     ``C, java``
变量类型         取决于赋值对象的类型          强制声明类型
变量创建         赋值之后                    声明与赋值可以分离
类型检查         运行时                      运行前（编译阶段）
类型鉴别手段                                 继承、接口
============  =========================  =========

:静态类型语言: 因为类型强制声明，所以 **IDE** 可以很好地感知代码，所以开发大型、复杂系统比较有保障
:动态类型语言: 变量保存的是对数据对象的引用，在运行时才动态创建函数和类的定义

    - **python** 可以在运行时更改自己的结构，例如添加、删除或替换函数、对象/类的属性和方法等


强/弱类型
==============

:强类型语言: 一旦变量的类型被确定，就不能（隐式）转化

    - 所谓的貌似转化，都是通过中间变量来达到，原本的变量的类型肯定是没有变化的
    - **python** 是强类型的语言
        - 对象具有三个特性：身份、类型、值
        - 变量创建之后，“身份”和“类型”就不再改变
:弱类型语言: 一个变量的类型是由其应用上下文确定的

    - 比如：直接支持 ``字符串 + 整数``
        - 在支持运算符重载的强类型语言中也能通过外部实现的方式在形式上做到这一点，不过内涵完全不一样
    - **javascript** 、**java** 是弱类型的语言

---------

语言的实现
=================

:中间代码: 字节码

    - 可以翻译成 **目标代码** ，也可以由解释器直接执行
:目标代码: 由机器指令组成（近似于 **机器代码** ），不能直接在硬件上独立运行

    - 源文件经过 **编译、汇编和链接器链接** 之后输出 **目标代码**
        - 因为源程序中可能使用了一些汇编程序不能解释引用的库函数，而库函数又不在源程序中， 此时还需要 **链接程序** 完成外部引用和目标模板调用的链接任务，最后才能输出可执行代码（二进制文件）
:机器代码: 直接运行在硬件上

- 根据语言的实现，将程序设计语言划分为两大类
    :编译型语言:
        - 程序执行的是计算机的机器语言
            - ``源文件 ---> [字节码 --->] 目标代码 ---> 机器代码 ---> 在硬件上执行``
        - ``C, C++, Fortran, Pascal, Ada``
        - 运行效率高，通常无法移植
    :解释型语言:
        - 程序执行的是虚拟机的机器语言
            - ``源文件 ---> 字节码 ---> 解释器执行``
            - 中间代码的解释由`专门的
            - 解释器将 **源代码** 逐一解释成 **字节码** 并执行
        - ``Python, JavaScript, Perl, Shell``
        - 优点
            - 与机器底层更远了，程序更易于移植，基本上无需改动就能在多平台上运行
            - 不用关心程序的编译和库的链接等问题，开发工作更加轻松
        - 缺点
            - 每次多出了 **编译（ Java 只编译一次 ）和链接** 的过程，运行效率低


Java/Python
------------

:Java:
    - 比较特殊需要 **编译**
        - 但是没有直接编译成 **机器语言** ，而是编译成 **字节码**
            - 然后在虚拟机上用解释执行字节码
:Python:
    :源代码: **.py** 文件
    :字节码:
        - 不能用文本编辑器修改
        - 每条语句在执行时才被解释器翻译成字节码
            - 每执行一次就翻译一次，运行效率比 **Java** 低
        - 手动编译
            - 节省加载模块的时间，提高效率
            - 增加了反向工程的难度，一定程度上保护源代码
            :`生成 .pyc 文件`_:
                - 解释器会检查 **.pyc** 文件的生成时间
                    - 如果 **.py** 文件的修改时间更新，就生成新的 **.pyc** 文件
            :`生成 .pyo 文件`_:
                - 编译优化后的字节码文件（只是移除了断言）
                - <= **.pyc** 文件


生成 .pyc 文件
-------------
.. code-block:: python

    import xxx
    import py_compile
    py_compile.compile("xxx.py")


生成 .pyo 文件
-------------
.. code-block:: bash

    python -O -m py_compile xxxx.py


Python 的不同实现
----------------
- 语法相通，类库的实现不同

:CPython: 用 **C** 实现 **Python** 及其解释器

    - **目前的参考实现**
:Jython_: 用 **Java** 实现 **Python** 及其解释器
:pypy:    用 **Python** 实现 **Python** 及其解释器
- 还有 **C++(Pyston), C#(IronPython), Ruby, JS** 等实现，成熟度非常不同
- 了解底层实现更有助于了解这门语言的设计思想以及实现限制等


Jython
::::::::
.. _Jython: http://www.jython.org
- **Python** 语言在 **Java** 中的完全实现
    - 同时拥有解释器和编译器，无需编译就可以测试程序代码
- 以 **Python** 语法编写在 **Java** 虚拟机上运行的软件
    - 比 **Java** 程序简洁
    - 不仅提供了 **CPython** 模块库，同时也提供了所有的 **Java** 类
- 安装
.. code-block:: bat

    cd path/to/jython_installer-2.7a2.jar
    java -jar jython_installer-2.7a2.jar
    :: 添加环境变量：PATH=${path/to/jython.bat}
    :: 退出： ctrl + c,ctrl + c
    # import sys; sys.exit()
