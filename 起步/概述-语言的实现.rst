语言的实现
=========
    :中间代码: 字节码

        - 可以翻译成 **目标代码** ，也可以由解释器直接执行
    :目标代码: 由机器指令组成（近似于 **机器代码** ），不能直接在硬件上独立运行

        - 源文件经过 **编译、汇编和链接器链接** 之后输出 **目标代码**
            - 因为源程序中可能使用了一些汇编程序不能解释引用的库函数，而库函数又不在源程序中， 此时还需要 **链接程序** 完成外部引用和目标模板调用的链接任务，最后才能输出可执行代码（二进制文件）
    :机器代码: 直接运行在硬件上

    - 根据语言的实现，将程序设计语言划分为两大类
        :编译型语言:
            - 程序执行的是计算机的机器语言
                - ``源文件 ---> [字节码 --->] 目标代码 ---> 机器代码 ---> 在硬件上执行``
            - ``C, C++, Fortran, Pascal, Ada``
            - 运行效率高，通常无法移植
        :解释型语言:
            - 程序执行的是虚拟机的机器语言
                - ``源文件 ---> 字节码 ---> 解释器执行``
                - 中间代码的解释由`专门的
                - 解释器将 **源代码** 逐一解释成 **字节码** 并执行
            - ``Python, JavaScript, Perl, Shell``
            - 优点
                - 与机器底层更远了，程序更易于移植，基本上无需改动就能在多平台上运行
                - 不用关心程序的编译和库的链接等问题，开发工作更加轻松
            - 缺点
                - 每次多出了 **编译（ Java 只编译一次 ）和链接** 的过程，运行效率低


Java/Python
-----------
    :Java:
        - 比较特殊需要 **编译**
            - 但是没有直接编译成 **机器语言** ，而是编译成 **字节码**
                - 然后在虚拟机上用解释执行字节码
    :Python:
        :源代码: **.py** 文件
        :字节码:
            - 不能用文本编辑器修改
            - 每条语句在执行时才被解释器翻译成字节码
                - 每执行一次就翻译一次，运行效率比 **Java** 低
            - 手动编译
                - 节省加载模块的时间，提高效率
                - 增加了反向工程的难度，一定程度上保护源代码
                :`生成 .pyc 文件`_:
                    - 解释器会检查 **.pyc** 文件的生成时间
                        - 如果 **.py** 文件的修改时间更新，就生成新的 **.pyc** 文件
                :`生成 .pyo 文件`_:
                    - 编译优化后的字节码文件（只是移除了断言）
                    - <= **.pyc** 文件


生成 .pyc 文件
-------------
    .. code-block:: python

        import xxx
        import py_compile
        py_compile.compile("xxx.py")


生成 .pyo 文件
-------------
    .. code-block:: bash

        python -O -m py_compile xxxx.py


Python 的不同实现
----------------
    - 语法相通，类库的实现不同
    :CPython: 用 **C** 实现 **Python** 及其解释器

        - **目前的参考实现**
    :Jython_: 用 **Java** 实现 **Python** 及其解释器
    :pypy:    用 **Python** 实现 **Python** 及其解释器
    - 还有 **C++(Pyston), C#(IronPython), Ruby, JS** 等实现，成熟度非常不同
    - 了解底层实现更有助于了解这门语言的设计思想以及实现限制等


Jython_
::::::::
    .. _Jython: http://www.jython.org
    - **Python** 语言在 **Java** 中的完全实现
        - 同时拥有解释器和编译器，无需编译就可以测试程序代码
    - 以 **Python** 语法编写在 **Java** 虚拟机上运行的软件
        - 比 **Java** 程序简洁
        - 不仅提供了 **CPython** 模块库，同时也提供了所有的 **Java** 类
    - 安装
    .. code-block:: bat

        cd path/to/jython_installer-2.7a2.jar
        java -jar jython_installer-2.7a2.jar
        :: 添加环境变量：PATH=${path/to/jython.bat}
        :: 退出： ctrl + c,ctrl + c
        # import sys; sys.exit()
