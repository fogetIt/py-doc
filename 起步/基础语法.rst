变量命名规则
-----------
    - 第一位不能是数字
    - 不能含有特殊字符
    - 严格区分大小写
    - 不要使用保留字

    - 推荐
        :类名:                      首字大写，驼峰
        :模块名、包名、普通变量、函数: 小写字母，蛇形
        :全局变量:                   大写字母，蛇形


变量值
------
    - 可以是任意的数据对象
    - 如果内存中原来有数据，则直接绑定，否则创建新的数据对象
    - 多个变量名可以绑定同一个数据对象


赋值
----
    :赋值运算符: **=** ，绑定变量名与数据对象
    .. code-block:: python

        a = 123                  #: 单一变量赋值
        b = c = d = 234          #: 链式赋值
        e, f, g = 345, 456, 567  #: 序列解包赋值
        h, i = [1]               #: ValueError  # 序列解包变量个数必须等于序列元素个数
        j, k = [1, 2, 3]         #: ValueError  # 序列解包变量个数必须等于序列元素个数
        del b, f                 #: 删除变量
        print(b)                 #: NameError
        l = ['a']; l[0] = 123    #: 索引赋值


特殊变量
-------
    :``__xxx__``: 系统变量
    :``_``:
        - 保存最后一个表达式的值
            - 原理
            .. code-block:: python

                import sys
                # 把当前行的值（非 None ）自动赋给"_"，不断更新
                sys.displayhook(var)
        - 通常用于实现国际化和本地化字符串之间翻译查找的函数名称（ C 语言约定）
    :``__xxx``:
        - 类的私有成员变量、私有函数
            - 只可以在类的内部调用，不能被外部直接访问
            - 子类中无法通过重写方法来访问和修改，用来被避免子类覆盖
    :``_xxx``:
        - 模块的弱“内部使用”标识
            - 该方法或属性不属于 **API** ， **不应该** 被调用
            - 不会被 **from** 、 **import** 语句导入，除非模块或包中的 **__all__** 列表显式地包含
    :``xxx_``: 只是为了避免与 **python** 关键字冲突


注释
----
    .. code-block:: python

        # 单行注释
        '''多行注释'''
        """多行注释"""


物理行，逻辑行
------------
    :物理行: 在编写程序时所看见的
    :逻辑行:
        - 单个 **Python** 语句
        - **建议** 每行都只使用 **1** 个语句，使代码更 **易读**
    :折行:
        - 当逻辑行太长的时候，在多于一个物理行写一个逻辑行
        .. code-block:: python

            S = "hello" + \
                "world"
            print(S)  # helloworld
    :合并行:
        .. code-block:: python

        print("hello");print("world")


执行顺序
-------
    :python: 从上到下顺序执行，上边的代码，找不到下边的方法
    :java: 只要在同一个类里的对象，都能互相找到
    :javascript: 只要在相同或上级作用域里的对象，都能互相找到


条件语句
-------
    - **if/while** 条件
        :执行条件: ``True``、常值（非0、非空）
        :不执行条件: ``False, 0, '', [], (), {}, set(), None``
    :``变量名/not 变量名``: 使用 ``boo()`` 求值后判断
    - 判断条件可以连写


循环
----
    - 在某条件下，循环执行某段程序，以处理需要重复处理的相同任务
    :continue: 跳过本次 **for/while** 循环，本次循环后边的语句都不执行
    :break: 打断 **for/while** 循环
    - ``while else``
    .. code-block:: python

        a = 10
        while a > 5:
            print(123)
            a -= 1
        else:
            print(456)
