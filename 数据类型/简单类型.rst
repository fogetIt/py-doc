数字
=======

:int:
    - bool
:long: 仅受限于虚拟内存大小
:float:
:complex: 无法转换成其它数字类型

- 同一数字类型运算，返回值类型不变
- 不同数字类型
    + complex > float > long > int
- 整形、浮点、长整形都可以互相转化
- 工厂函数
    =========================  =============
    ``int(x[, base=10])``        ``-> int or long``
     -                           :base: **x** 原本的进制
     -                           如果带 **base** 参数， **x** 要以字符串的形式进行输入
    ``long(x[, base=10])``       ``-> long``
    ``float(x)``                 ``-> floating point number``
    ``complex(real[, imag])``    ``-> complex number``
    `bool(x) -> bool`_           ``-> bool``
    =========================  =============


bool(x) -> bool
---------------
- **int** 的子类

    .. code-block:: python

        print(issubclass(bool, int) is True)  #: True
        True == 1                             #: True
        False == 0                            #: True
        True + True == 2                      #: True

- 关键字
    - python2__
        .. __: py2_bool.py
        - **True/False** 不是关键字，可以对其进行任意的赋值

            .. code-block:: python

                import keyword
                "True" not in keyword.kwlist  #: True
                True = "hello"

    - python3

        .. code-block:: python

            import keyword
            "True" in keyword.kwlist
            # True = "hello"  # SyntaxError
:真值测试: 直接判断对象的真假，无需写判断条件

    - 遵循 ``PEP`` 的规范
    - 执行效率高
    - 程序简洁、准确
    .. code-block:: python

        import timeit, dis

        print([i for i in (False, '', 0, [], (), {}, set(), None) if i]) # []

        x = True
        def if_x(): return None if x else None
        def if_eq(): return None if x == True else None

        # if_eq 多了一些检查的字节码，执行效率比较低
        print(timeit.timeit(if_x, "from __main__ import if_x", number=10000000))
        print(timeit.timeit(if_eq, "from __main__ import if_eq", number=10000000))
        print(dis.dis(if_x))
        print("*" * 20)
        print(dis.dis(if_eq))
    - ``==`` 具有传递性， ``a==b; b==c`` 会被化简为 ``a==c``


None
----
- **None** 是一个特殊的常量
- **None** 不是 ``False`` ，不是 ``0`` ，不是 ``''``
- **None** 和任何其他的数据类型比较永远返回 ``False``
- **None** 有自己的数据类型 ``<type 'NoneType'>``
- **None** 可以被赋值给任何变量，但不能创建其他 ``NoneType`` 对象
