builtin functions
==================
    - **python** 在启动时，就将必要的系统函数加入到解析器中，可以随时调用
    - 解决系统中特定的用途或者常用的功能


eval(source[, globals[, locals]]) -> value
-------------------------------------------
    - 计算字符串中的表达式，并返回对象
    .. code-block:: python

        print(eval('1+2'))  # 3


exec(str)
----------
    - 执行储存在字符串或文件中的程序语句
    .. code-block:: python

        exec('print("hello world")')  # hello world


hash(object) -> integer
------------------------
    - 计算一个对象的哈希值
    .. code-block:: python

        print(hash(123))              #: 123
        print(hash('abc'))            #: 1453079729188098211
        print(hash(lambda x: x + 1))  #: 8793711148549


map(function, sequence[, sequence, ...]) -> list
-------------------------------------------------
    - 将所有序列一起迭代，序列长度取最大序列长，以 **None** 补齐其余的序列
    - 将每一步迭代的各个序列的元素，作为函数的参数，计算出结果
        - 可以用 **None** 替代函数，直接返回参数
    - 将每一步计算结果放入 **list** ，最终返回
    .. code-block:: python

        print(map(lambda x, y: x + y, range(5), range(5, 10)))  #: [5, 7, 9, 11, 13]
        print(map(lambda x: x.title(), ["adm", "LIS", "baT"]))  #: ['Adm', 'Lis', 'Bat']
        print(map(None, range(5)))                              #: [0, 1, 2, 3, 4]
        print(map(None, range(3), range(3, 7)))                 #: [(0, 3), (1, 4), (2, 5), (None, 6)]
        #: python3 map() 返回的是一个生成器


zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]
------------------------------------------------------------
    - 将所有序列一起迭代，序列长度取最小序列长
    - 将每一步迭代的各个序列的元素，放入一个元组
    - 将每一步计算结果放入 **list** ，最终返回
    .. code-block:: python

        print(zip('abc', range(10)))        #: [('a', 0), ('b', 1), ('c', 2)]
        print(zip("hello"))                 #: [('h',), ('e',), ('l',), ('l',), ('o',)]
        print(dict(zip('abc', range(10))))  #: {'a': 0, 'c': 2, 'b': 1}
        #: python3 zip() 返回的是一个生成器


filter(function or None, sequence) -> list, tuple or string
------------------------------------------------------------
    - 将传入的函数依次作用到序列的每个元素
    :和 ``map()`` 不同: ``filter()`` 会对入参函数的计算结果求 **bool** 值
    - 将每一步计算结果为 **True** 的当前元素放入 **tuple** ，最终返回
    .. code-block:: python

        seq = (12, 50, 8, 17, 65, 14)
        print(filter(lambda x: x * 2, seq))                   #: (12, 50, 8, 17, 65, 14)
        print(filter(lambda x: 5 < x < 10, seq))              #: (8,)
        print(map(lambda x: x if 5 < x < 10 else None, seq))  #: [None, None, 8, None, None, None]
        #: python3 filter() 返回的是一个生成器


sum(sequence[, start=0]) -> value
----------------------------------
    - 求序列所有元素的和，再加上 **start**
    .. code-block:: python
        l = [1, 3, 5, 7, 9]
        print(sum(l))       # 25
        print(sum(l, 10))   # 35
        print(sum([], 10))  # 10


builtin functions
==================


--------------------------------------
`iter, reversed <../迭代/迭代器1.rst>`_
--------------------------------------


enumerate(iterable[, start]) -> iterator for index, value of iterable
----------------------------------------------------------------------
    - 下标循环
        - 把一个 **iterable** 的元素变成 ``(索引, 元素)`` ，同时迭代索引和元素本身
    .. code-block:: python

        print(enumerate([4, 7, 0]))                              #: <enumerate object at 0x7fa2d6bf7b90>
        print([(i, v) for i, v in enumerate([4, 7, 0])])         #: [(0, 4), (1, 7), (2, 0)]
        print([(i, v) for i, v in enumerate({"a": 1, "b": 2})])  #: [(0, 'a'), (1, 'b')]


sorted(iterable, key=None, reverse=False) --> new sorted list
--------------------------------------------------------------
    :key: 函数作用于每一个元素上，并根据函数计算结果进行排序，生成一个新的排序后的 **list**
    :reverse: 是否反转排序
    .. code-block:: python

        l1 = [1, 3, 2, 7, 0]
        l2 = [1, 3, 2, 7, 0]
        l1.sort()
        print(l1 == sorted(l2))
        print(l1, l2)                                  #: [0, 1, 2, 3, 7] [1, 3, 2, 7, 0]
        l = ['bob', 'about', 'Zoo', 'Credit']
        print(sorted(l, key=str.lower, reverse=True))  #: ['Zoo', 'Credit', 'bob', 'about']


any(iterable) -> bool
----------------------
    - 判断序列中是否 **含有** 非空、非否值
    .. code-block:: python

        print(any(['', [], {}, 0, False, ()])          #: False
        print(any(['', [], {}, 0, False, (), ('', )])  #: True


all(iterable) -> bool
----------------------
    - 判断序列中是否 **都是** 非空、非否值
    .. code-block:: python

        print(all([1, '']))  # False


apply(object[, args[, kwargs]]) -> value
-----------------------------------------
    - 传递参数元组和参数字典，间接地调用函数
        - **python3** 中已废弃此函数
    .. code-block:: python

        f = lambda : 123
        print(apply(f))                    #: 123
        f = lambda x, y, z=1: x + y + z
        print(apply(f, (1, 2), {"z": 3}))  #: 6
        print(apply(f, (1, 2, 3)))         #: 6


functools
----------
    :``reduce(function, sequence[, initial]) -> value``:
        .. code-block:: python

            if initial:
                result = function(initial, sequence[0])
                result = function(result, sequence[1])
                ...
            else:
                result = function(sequence[0], sequence[1])
                result = function(result, sequence[2])
                ...
            return result
        - e.g.

            .. code-block:: python

                from functools import reduce
                print(reduce(lambda x, y: x + y, [1, 3, 5, 7, 9], 100))  #: 125
        - **reduce** 在 **python2** 中是内建函数，不需要导入
