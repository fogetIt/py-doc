一切变量都是对象
====================
**python** 作为一种动态类型的语言，其对象和引用分离


非容器对象
------------
- 数字、字符串以及其它“原子”类型
- 没有 ``copy()`` ，产生的都是原对象的引用


容器对象
-----------

:所有能够引用、包含其他对象的对象: ``list, set, tuple, dict, class, instance, ...``

- 容器对象可以包含多个对象，指向各个元素对象的引用
    - 容器对象的 **id** 指向 **最外层引用**
- 只有容器之间才可能形成 `循环引用 <引用计数.rst>`_


窗口对象
"""""""""""""""
容器对象相对外层的对象，比如字符串所属的列表


容器的复制
"""""""""""""""

=========  ==================  =====================  ========
 -           赋值                 浅拷贝                 深拷贝
=========  ==================  =====================  ========
原理         只创建新变量名         复制最外层的引用         复制所有（多层）元素
内存开销      无                   很低                   很高
=========  ==================  =====================  ========

.. code-block:: python

    import copy

    a = [1, 2, 3, 4, ['a', 'b']]
    b = a
    c = copy.copy(a)
    d = copy.deepcopy(a)
    a.append(5)
    print(a)  #: [1, 2, 3, 4, ['a', 'b'], 5]
    print(b)  #: [1, 2, 3, 4, ['a', 'b'], 5]
    print(c)  #: [1, 2, 3, 4, ['a', 'b']]
    print(d)  #: [1, 2, 3, 4, ['a', 'b']]
    a[4].append('c')
    print(a)  #: [1, 2, 3, 4, ['a', 'b', 'c'], 5]
    print(b)  #: [1, 2, 3, 4, ['a', 'b', 'c'], 5]  #: 赋值，与原对象完全同步
    print(c)  #: [1, 2, 3, 4, ['a', 'b', 'c']]     #: 浅拷贝，与原对象的非最外层同步
    print(d)  #: [1, 2, 3, 4, ['a', 'b']]          #: 深拷贝，与原对象互不影响
    print(a is b)              #: True   #: 赋值，内存地址与原对象完全相同
    print(a is c)              #: False
    print(a is d)              #: False
    print(a[4] is c[4])        #: True   #: 浅拷贝，非最外层内存地址与原对象的相同
    print(a[4] is d[4])        #: False
    print(a[0] is d[0])        #: True
    print(a[4][0] is d[4][0])  #: True   #: 深拷贝，只有最内层内存地址与原对象相同
    del a
    print(b, c, d)  # 删除原数据，拷贝仍然存在（删除的是变量名）


浅拷贝的应用
::::::::::::::::
- 传参、引用、返回值都是浅拷贝
.. code-block:: python

    import copy
    a = [1, 2, 3, 4, ['a', 'b']]
    b = a[:]          #: 切片操作
    c = list(a)       #: 工厂函数
    d = a.copy()      #: .copy()
    e = copy.copy(a)  #: copy.copy
    print(a is b, a[4] is b[4])  #: False True
    print(a is c, a[4] is c[4])  #: False True
    print(a is d, a[4] is d[4])  #: False True
    print(a is e, a[4] is e[4])  #: False True


warn
:::::
- **list** 内嵌套的 **tuple** ，不能通过索引赋值、删除
- **tuple** 内嵌套的 **list, dict** ，可以通过索引赋值、删除
