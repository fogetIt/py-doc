内存管理，决定语言性能的重要因素
==============================================

:手工管理: C
:垃圾回收: Java, Python


id(object) -> integer
""""""""""""""""""""""
- 返回 **10** 进制内存地址

:``hex(id(object)) -> string``: 返回 **16** 进制内存地址


is
""
比较两个变量（变量名引用的对象）的内存地址


栈溢出
""""""""""""""""
- 函数调用是通过栈（ **stack** ）数据结构实现的
- 系统为每一层递归调用的返回点、局部变量等开辟了栈来存储
    - 每当进入一个函数调用，栈就会加一层栈帧
    - 每当函数返回，栈就会减一层栈帧
- 由于栈的大小不是无限的，所以，递归调用的次数过多，会导致 **栈溢出**
- 所以一般不提倡用递归算法设计程序
