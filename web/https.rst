https
=====
    :HTTP + SSL/TLS: 在 **HTTP** 上加了一层处理加密信息的模块

        :协商密钥算法（hash、对称加密、非对称加密）:
            :第一次握手:
                :客户端: 发起请求（包含客户端支持的 **密钥算法套件** ）
            :第二次握手:
                :服务器: 发送证书

                    :证书内容:
                        - 从 **密钥算法套件** 选出的算法
                            - **hash** 算法
                            - **对称加密** 算法
                            - **非对称加密** 算法
                        - （非对称加密） **公钥**
                        - 网址
                        - 证书的颁发机构、失效日期
        :用 非对称加密算法 协商 对称加密算法 的密钥:
            :第三次握手:
                :客户端:
                    1. 验证证书的合法性
                    #. 生成随机数（ **对称加密** 的密钥）
                    #. 发送 `非对称加密的对称加密密钥`_ 和 `对称加密的 hash 消息`_
                        .. _`非对称加密的对称加密密钥`:
                        :非对称加密的对称加密密钥: 用 **公钥** **非对称加密** 随机数，作为 **对称加密** 的密钥
            :第四次握手:
                :服务器:
                    - 用 **非对称加密** 的私钥解密随机数，作为 **对称加密** 的密钥
                    - 验证 `对称加密的 hash 消息`_
                    - 发送 `对称加密的 hash 消息`_
        :用 对称加密算法 加密消息后互相通信:
            :第五次以后:
                :客户端:
                    - 验证 `对称加密的 hash 消息`_
                    - 发送 `对称加密的 hash 消息`_


对称加密的 hash 消息
------------------
    :加密:
        - 用 **hash** 算法计算消息，生成 **签名**
        - 用 **随机数** **对称加密** ``消息 + 签名``
    :验证:
        - 用 **随机数** **对称解密** ``消息 + 签名``
        - 验证 ``消息`` 与 ``签名``


密钥算法
-------
    :对称加密: 密钥同时扮演加密和解密的角色

        :性能非常低: 寻找大素数、大数计算、数据分割需要耗费很多的 CPU 周期
    :非对称加密: 用公钥加密，用私钥解密
    :hash: 只能比较加密后的值，无法解密



S(erver )N(ame )I(ndication)
-----------------------------
    - 服务器使用多个域名和证书的 ``SSL/TLS`` 扩展
        :HTTPS 前两次握手:
            1. 浏览器请求服务器证书
            2. 服务器发送证书给浏览器
                - 服务器在发送证书时，还不知道浏览器访问的域名
            - 所以不能根据不同域名发送不同的证书
            - 所以一个 **IP** 只能绑定一个证书
            - 如果有多域名对应着多证书
                :nginx:
                    - 如果有 `默认证书`_，发送这一个 **server** 下的证书
                    - 如果无 `默认证书`_，发送第一个 **server** 下的证书

                    .. _`默认证书`:
                    .. code-block:: nginx

                        # 默认证书
                        listen 443 default_server ssl;
        :SNI 工作原理: 浏览器在连接到服务器建立 **SSL** 连接之前先发送要访问站点的域名
        :Nginx SNI:
            :确认 Nginx 支持 OpenSSL 模块:
                :``nginx -V``: ``TLS SNI support enabled...--with-http_ssl_module...``
            - 在不同 **server** 里指定不同的证书
