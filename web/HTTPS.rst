HTTPS
=====
    :HTTP + SSL/TLS: 在 **HTTP** 上加了一层处理加密信息的模块

        :SSL 握手: 用 **明文** 协商传输协议、密钥算法

            :客户端发起请求:
                - 支持的 加密方法
                - 支持的 **SSL协议** 版本
                - 支持的 压缩方法
                - 客户端生成的 **随机数1**
            :服务器回应:
                - 确认使用的 加密方法
                - 确认使用的 **SSL协议** 版本
                - 服务器生成的 **随机数2**
                - 服务器证书
                    - **公钥（非对称）**
                    - 网址
                    - 颁发机构
                    - 失效日期
        :HTTP 握手: 用 **非对称** 加密算法，协商 **对称** 加密算法的密钥

            :客户端回应:
                1. 验证证书的合法性
                #. 握手结束通知
                    - 生成 **随机数3** ，用 **公钥（非对称）** 加密
                    - 生成一段 **通知消息** ，协定随后使用的加密方法和密钥
                    - 发送
                        - 经过 **非对称** 加密的 **随机数3**
                        - 经过 `hash 计算`_ 的 **通知消息**
            :服务器回应:
                - 用 **私钥（非对称）** 解得 **随机数3**
                - 使用协定的算法解密、验证收到的经过 `hash 计算`_ 的消息
                - 握手结束通知
                    - 生成一段 **通知消息** ，协定随后使用的加密方法和密钥
                    - 发送经过 `hash 计算`_ 的 **通知消息**
        - 使用经过 `hash 计算`_ 的消息进行通信


三个随机数
---------
    - **SSL** 协议不信任每个主机都能产生完全随机的随机数
    - 不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样


hash 计算
---------
    :加密:
        - 用 **3** 个随机数，计算生成本次会话所用 **会话密钥（对称）**
        - 用 **hash** 算法计算消息，生成 **签名**
        - 用 **会话密钥（对称）** 加密 ``消息 + 签名``
    :解密、验证:
        - 用 **随机数** **对称解密** ``消息 + 签名``
        - 比对 ``消息`` 与 ``签名``


密钥算法
-------
    :对称加密: 密钥同时扮演加密和解密的角色

        :性能非常低: 寻找大素数、大数计算、数据分割需要耗费很多的 CPU 周期
    :非对称加密: 用公钥加密，用私钥解密
    :hash: 只能比较加密后的值，无法解密



S(erver )N(ame )I(ndication)
-----------------------------
    - 服务器使用多个域名和证书的 ``SSL/TLS`` 扩展
        :SSL 握手:
            1. 浏览器请求服务器证书
            2. 服务器发送证书给浏览器
                - 服务器在发送证书时，还不知道浏览器访问的域名
            - 所以不能根据不同域名发送不同的证书
            - 所以一个 **IP** 只能绑定一个证书
            - 如果有多域名对应着多证书
                :nginx:
                    - 如果有 `默认证书`_，发送这一个 **server** 下的证书
                    - 如果无 `默认证书`_，发送第一个 **server** 下的证书

                    .. _`默认证书`:
                    .. code-block:: nginx

                        # 默认证书
                        listen 443 default_server ssl;
        :SNI 工作原理: 浏览器在连接到服务器建立 **SSL** 连接之前先发送要访问站点的域名
        :Nginx SNI:
            :确认 Nginx 支持 OpenSSL 模块:
                :``nginx -V``: ``TLS SNI support enabled...--with-http_ssl_module...``
            - 在不同 **server** 里指定不同的证书
