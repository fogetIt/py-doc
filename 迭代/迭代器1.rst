迭代器
======
    ==============  ======
    magic method      todo
    ==============  ======
    ``__iter__()``    返回迭代（容器）对象
    ``__next__()``    返回容器的下一个元素
     -                :python2: ``next()``
                      :python3: ``__next__()``
    ==============  ======
    :iterable:
        :可迭代对象: 实现了 ``__iter__()`` 的容器对象

    :iterator:
        :迭代器: 实现了 ``__iter__(), __next__()`` 的容器对象

            :特点: 单向向前，只能迭代一次，无法复制
    .. code-block:: python

        from collections import Iterable, Iterator

        class Cls(object): __iter__ = None
        class D(object): __next__ = None
        class E(Cls, D): pass

        iable = lambda o: isinstance(o, Iterable)  #: collections.Iterable: 可迭代对象基类
        iator = lambda o: isinstance(o, Iterator)  #: collections.Iterator: 迭代器对象基类

        print(iable(Cls()), iator(Cls()))  #: True False   #: 可迭代对象: 实现了 __iter__
        print(iable(D()), iator(D()))      #: False False
        print(iable(E()), iator(E()))      #: True True    #: 迭代器对象: 实现了 __iter__, __next__

        print(iable("abc"), iator("abc"))        #: True False  #: 一些内置对象
        print(iable([1, 2]), iator([1, 2]))      #: True False
        print(iable({"a": 1}), iator({"a": 1}))  #: True False
        print(iable(123), iator(123))            #: False False



索引下标
-------
    =================  ======
    method               todo
    =================  ======
    ``__getitem__()``    :索引下标查询: ``print(seq[i])``
    ``__setitem__()``    :索引下标赋值: ``seq[i] = value``
    ``__delitem__()``    :索引下标删除: ``del seq[i]``
    =================  ======


iter
-----
    :``iter(collection) -> iterator``: 转化 **iterable** -> **iterator**

        .. code-block:: python

            S = "abc"
            IS = iter(S)
            print(IS)               #: <str_iterator object ...>
            print(S.__next__())     #: AttributeError
            print(IS.__next__())    #: a           #: 拥有 __next__()
            print([i for i in IS])  #: ['b', 'c']
            print([i for i in IS])  #: []          #: 只能迭代一次
    :``iter(callable, sentinel) -> iterator``: 转化 **callable** -> **iterator**

        :``callable``: 一个可调用对象
        :``sentinel``: 哨兵

            - 当枚举到的值等于哨兵时，就会抛出 ``StopIteration``


reversed(sequence) -> reverse iterator
---------------------------------------
    - 返回一个反序的迭代器

        .. code-block:: python

            S = "abc"
            IS = reversed(S)
            print(IS)               #: <reversed object at 0x7f215764aa20>
            print(IS.__next__())    #: c           #: 拥有 __next__()
            print([i for i in IS])  #: ['b', 'a']
            print([i for i in IS])  #: []          #: 只能迭代一次

