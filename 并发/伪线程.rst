解释器全局锁
-----------
    - Python GIL(Global Interpreter Lock)
    :python 伪线程:
        :定时器: 在 **1** 个进程内定时切换线程
        - 无法利用多核的优势
            - 任意时间只有一个 **python** 解释器（进程）在解释字节码
            - **CPython** 中，为了解决多线程间多份缓存数据一致性和状态同步的困难
                - 任何线程执行前，必须先获得 **GIL** ，其他的线程就需要等待这个线程释放之后才可以访问
                - 每执行 **100** 条字节码，解释器就自动释放 **GIL** ，让别的线程有机会执行
            - 实现了对共享资源访问的互斥，而且是非常霸道的 ``解释器级别的互斥``
        - 所以，多线程只能交替执行，即使 ``线程数 <= CPU 核心数`` ，也只能用到 **1** 个核
    :python 多进程: 能够利用多核优势，多个进程有各自独立的 **GIL**，互不影响
------

:僵尸进程: 进程结束，线程没结束，线程不能自己释放空间，导致：

    - 内存无法释放，卡慢
    - 新的进程无法开始
-----

:线程安全问题: 多线程访问同一代码，是否会产生不确定的结果
