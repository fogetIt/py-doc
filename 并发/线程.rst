python 伪线程/定时器
-------------------
    - **CPython** 由于 `解释器全局锁 <安全问题1.rst>`_ ，线程在 **1** 个进程内定时切换
        - 所以无法利用多核的优势
        - 所以更适合 **I/O** 密集型应用


CPU 密集型程序 VS I/O 密集型程序
-----------------------------
    :I/O: 程序的输入、输出，一般对应着硬盘、内存的读/写
    :I/O 密集型程序:
        - 在硬盘、内存达到性能极限（速度）时， **CPU** 占用率仍然较低， **CPU** 在等待 **I/O**
        - 原因
            - 任务本身需要大量 **I/O** ，而 **pipeline** 做得不是很好，没有充分利用 **CPU**
            - 数据局部性不是很好，导致较多 **page error** ，产生了大量 **I/O** 开销
        - e.g.
            - **web server** 的静态页面访问
            - 基于数据库的一些应用
        :并发选择: ``多进程 + 协程`` 、 ``多进程 + 多线程``

            - 这种情况下，多线程可以明显提高效率
                - 比如，爬虫等待 socket 返回数据时可以执行其它代码
    :CPU 密集型程序: 计算密集型

        - **CPU** 占用很高， **I/O** 在很短的时间就可以完成
        - 原因
            - 程序大部份时间用来做计算、逻辑判断等 **CPU** 动作，不太需要访问 **I/O** 设备
            - 程序是多线程实现因此屏蔽掉了等待 **I/O** 的时间
        - e.g.
            - 一个计算圆周率至小数点一千位以下的程序（绝大部份时间用在三角函数和开根号的计算）
        :并发选择: ``多进程``

            - 这种情况下，多线程是鸡肋
                - 多个线程的代码很可能是线性执行的，因为有 ``context switch`` ，效率可能还不如单线程
    :判断:
        - 查看达到性能极限时的 **CPU** 占用率（ top ）
        - 查看具体的 **I/O** 操作或 **page error** 的统计数据（ sar, iostat ）
        - 查看更精准的信息，例如确定具体是哪些代码产生了这些开销（ oprofile, vtune ）
    - 如果在一个系统里 CPU 密集型程序和 I/O 密集型程序一起 run 会怎样？
        - 应该是 CPU 密集型程序对 CPU 的占用率会非常不公平地接近 100%
            - 因为 I/O 密集型程序可能一个时间片还没用完就阻塞了，放弃 CPU 了
            - 而 CPU 密集型程序因此而得到了很多调度机会，并且每次都能把 CPU run完
            - 故在这样的系统里要给 I/O 密集型程序更高的优先级使其能被调度得更多些


阻塞
----
    :threading.Timer(seconds, func): 异步阻塞一段时间，后面的代码会不间断执行
    :time.sleep(n):                  同步阻塞一段时间，可以模拟 **I/O** 阻塞


multiprocessing.dummy
----------------------
    - 精确克隆了 **mulprocessing** 的 **API** （线程版）
    - 可以方便地切换并发/并行
    :Pool:
        - 线程池
            :Pool().map(func, iterable): 将序列分配到不同线程上，分别执行函数


其它 API
--------
    .. code-block:: python

        import threading, _thread
        t = threading.Thread(
            group=None,
            target=None,  #: 执行函数
            args=(),      #: target 参数
            kwargs=None,  #: target 字典参数
            name=None,    #: 别名
        )
        t.is_alive()   #: 判断线程是否活动
        t.getName()    #: 返回线程名
        t.setName("")  #: 设置线程名
        threading.get_ident()       #: 返回当前线程标识（start() 之后，非 0）
        _thread.get_ident()         #: 返回当前线程标识（start() 之后，非 0）
        threading.current_thread()  #: 返回当前线程对象
        threading.enumerate()       #: 返回正在运行的线程列表
        threading.active_count()    #: 返回正在运行的线程数
        _thread.interrupt_main()    #: 在子线程中终止主线程

