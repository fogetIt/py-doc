并发安全对象
================
- 在 **子执行** 中实例化的 **并发安全对象** 是各自独立的
- **并发安全对象** 必须在 **主执行单元** 中 ``实例化`` ，然后被 **子执行单元** ``引用``

:用法:

    :实例化:
        1. 在 **主执行单元** 中直接实例化 **并发安全对象**
        #. 将 **并发安全对象** 实例封装成类属性，在 **主执行单元** 中定义或导入类对象

    :引用:

        1. 在 **子执行单元** 中通过变量名引用
        #. 在创建 **子执行单元** 时，作为初始化参数，传递过去


锁
-----
- 锁定 **执行单元** 之间的全局变量

:解释器全局锁: ``CPython G(lobal )I(nterpreter )L(ock)``

    - 任何线程执行前，必须先获得 **GIL** ，其他的线程需要等待这个线程释放之后才可以访问
    - 每执行 **100** 条字节码，解释器就自动释放 **GIL** ，让别的线程有机会执行
    - 任意时间只有一个 **python** 解释器（进程）在解释字节码，多线程只能交替执行
        - 即使 ``线程数 <= CPU 核心数`` ，也只能用到 **1** 个核
        - 在 ``解释器级别`` 实现了对共享资源访问的互斥

:进程锁/线程锁: **multiprocessing, multiprocessing.Manager(). threading** 都实现了下列对象

    :``Lock()``:              `互斥（同步）锁`_
    :``RLock()``:             `多重（递归）锁`_
    :``Semaphore(n)``:        `信号量`_
    :``BoundedSemaphore(n)``: `绑定信号量`_
    :``Condition()``:         `条件变量（关联锁）`_
    :``Event()``:             `事件`_


互斥（同步）锁
"""""""""""""""""""""

:应用场景:
    - 多进程修改共享数据
    - 多线程修改共享数据
        - **I/O** 密集型多线程任务
        - 一个线程复制数据与修改数据期间发生了阻塞，其它线程也复制修改了原数据

:acquire(): 申请锁
:release(): 释放锁

- 第一个  **执行单元** （进程/线程）申请到锁，会在执行公共数据的过程中持续阻塞后续  **执行单元**
- 后续  **执行单元** 只能等待第一个  **执行单元** 释放锁
- 当第一个  **执行单元** 将锁释放，后续的  **执行单元** 会进行争抢

:死锁:
    - 由于 **2~*** 个  **执行单元** 之间相互等待对方结束而引起阻塞的情况
        - 当有多个互斥锁对象存在的时候，可能会导致死锁


多重（递归）锁
"""""""""""""""""""""
- 锁对象可被同一线程多次 **acquire()/release()**
- 除了 ``locked, unlocked`` 状态外还记录了当前 **执行单元** 和递归层数
- **acquire()/release()** 必须成对出现
- 当 **release()** 次数等于 **acquire()** 次数时，释放锁


信号量
"""""""""""
- 限制线程的并发量
    - 每次允许指定数量的 **执行单元** 访问某段程，其它 **执行单元** 处于等待
    - 当并发量限制为 **1** 时，就相当于 ``RLock()``
- 管理一个内置的计数器

    :acquire(): 计数 -1

    - 计数 ==0 时，自动阻塞，等待 **release()**

    :release(): 计数 +1


绑定信号量
"""""""""""""""""
- 在调用 **release()** 时，会检查增加的计数是否超过上限


条件变量（关联锁）
""""""""""""""""""""
- 在内部维护一个多重锁对象

:acquire()/release(): 含义同 **RLock()**
:wait([timeout]):     **release()** 锁对象，同时挂起 **执行单元**

    :适合场景: 队列为空或队列已满
:notify():     唤醒一个挂起的 **执行单元** （如果存在），但不会释放锁
:notify_all(): 唤醒所有挂起的 **执行单元** ，但不会释放锁


事件
"""""""""""""""
- 通过维护内部的标识符来实现 **执行单元** 间的同步
- 一个 **执行单元** 通知事件，其他 **执行单元** 等待事件

:wait([timeout]): 挂起 **执行单元** （直到标识符为 True 或超时，如果是守护线程，不会阻塞主线程）
:set():           标识符设为 True
:clear():         标识符设为 False
:isSet():         判断标识符


--------

队列
----------

:线程队列: 在同一个进程下的线程间通讯

    :Queue(maxsize=0):         **FIFO** 先进先出
    :LifoQueue(maxsize=0):     **LIFO** 后进先出
    :PriorityQueue(maxsize=0): **Priority** 优先级低的先出

        :maxsize: 标注队列长度（ ``<=0`` 代表无限长）
:进程队列: 进程与进程之间进行通讯
:协程队列: 在同一个线程下的协程间通讯

    - 无线程同步开销
    - 可以线程内 Greenlet 之间同步，无法线程间操作
:消息队列: 程序与程序之间进行通讯


API
"""""
.. code-block:: python

    import Queue

    Q = Queue.Queue()

    # 在队尾插入一个对象
    Q.put(item, block=True, timeout=None)
    """
    timeout  设置等待超时时间
             None  一直等待（阻塞）
    block    True   如果队列已满，阻塞，直至超时，引发 Queue.Full
             False  如果队列已满，不阻塞，立即引发 Queue.Full
    Q.put_nowait(item) == Q.put(item, block=False)
    """

    # 从队列中删除并返回一个对象
    Q.get(block=True, timeout=None)
    """
    timeout  设置等待超时时间
             None  一直等待（阻塞）
    block    True   如果队列已空，阻塞，直至超时，引发 Queue.Empty
             False  如果队列已空，不阻塞，立即引发 Queue.Empty
    Q.get_nowait() == Q.get(block=False)
    """

    Q.empty()       # -> True/False 判断队列是否为空
    """
    1. Queue.Queue()                        empty() 加线程锁
    2. multiprocessing.Queue()              empty() 没有加锁（不稳定）
    3. multiprocessing.Manager().Queue()()  empty() 加线程锁
        Manager() 本身是进程安全的
        Manager() 内部调用 Queue 模块
    """
    Q.qsize()       # -> 队列的大小
    Q.full()        # -> True/False 判断队列是否满了

:``task_done(), join()``:
    - 未实现 ``task_done(), join()`` 的模块方法
        - ``gevent.queue.Queue``
        - ``gevent.queue.LifoQueue``
        - ``gevent.queue.PriorityQueue``
        - ``multiprocessing.Queue``
    - 实现了 ``task_done(), join()`` 的模块方法
        - ``Queue.Queue``
        - ``Queue.LifoQueue``
        - ``Queue.PriorityQueue``
        - ``gevent.queue.JoinableQueue``
        - ``multiprocessing.JoinableQueue``
        - ``multiprocessing.Manager().Queue``
        - API
            .. code-block:: python

                """
                用 task_done() 与 join() 配合，来判断队列是否已经结束
                    get() 不知道队列空了，因此就需要在 get() 前判断 empty()
                        用 while 循环检查 empty()
                        empty() 会立马返回
                        如果队列为空，会一直死循环，循环等待很耗 CPU
                """

                Q.put(item, block=True, timeout=None)
                """
                原理：
                     unfinished_tasks += 1
                        unfinished_tasks 保存了当前队列中的数目
                        只要有数据被加入队列，unfinished_tasks 就会增加
                """
                Q.task_done()
                """
                用法：
                    在一项任务完成后，调用（为了配合 join ，阻塞/重启某个执行单元）
                        如果在 get() 之后立即调用
                        get() 之后还有耗时任务
                        在耗时任务未完成时切换到了被 join() 执行单元
                        被 join() 的执行单元会在耗时任务未完成前就执行下一步程序
                原理：
                    unfinished_tasks -= 1
                        调用 get() 获取并删除了元素，但 unfinished_tasks 并没有减少
                        只有调用 task_done() 时才减少 unfinished_tasks
                        当 unfinished_tasks == 0 ，向队列发送一个信号
                """
                Q.join()
                """
                用法： 阻塞当前执行单元（通常是主执行单元），直到队列的任务数为 0 ，再执行别的操作
                原理
                    使用 wait() 挂起（阻塞）执行单元
                    直到 task_done() 判断 unfinished_tasks == 0 ，向队列发送一个信号
                """
