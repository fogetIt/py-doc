协程
=======
- 在 **1** 个线程内开启多个任务，但一次只顺序执行一个
- 等到所执行的任务遭遇阻塞，就切换到下一个任务继续执行，以期节省下阻塞所占用的时间
- 协程的调度对于内核来说是不可见的（由程序语言控制）
- 协程间是协同调度的，这使得并发量在上万的时候，协程的性能远高于线程

    :系统调用：system call:
        - 先让 CPU 运行操作系统的调度程序
        - 然后再由调度程序决定该跑哪一个进程/线程
    - 不管是进程还是线程，每次阻塞、切换都需要 **系统调用**
    - 由于抢占式调度执行顺序无法确定，使用线程时需要非常小心地处理同步问题
    - 而协程完全不存在执行顺序无法确定的问题（事件驱动和异步程序也有同样的优点）

:优点:

    :可读性更好:

        - 协程接口是异步的，但是代码是流畅（顺序）的，并没有被异步和回调打乱
        - 协程会把异步的事件和回调封装起来，形成调用接口
    - 可以通过控制函数调用的层次来进一步降低协程耗费资源的大小
    - ``高并发 + 高扩展性 + 低成本``

:缺点:

    - 和 ``python`` 线程一样，无法利用多核优势
    - 需要自己来做调度，代码比较复杂
    - 进行阻塞操作（如 **IO** ）时会阻塞掉整个程序

:调度方式: 协作式多任务


stackless
----------
- python 的微线程（ tasklet ）扩展
- 低开销（切换开销远远小于系统线程）、轻量
- 并发性能比其他方案快上几十倍
- channel 机制，实现简单


gevent
-------
- 性能仅次于 stackless （大致慢一倍）
- 提供了比较完善的协程支持
    **自动切换 greenlet ，充分利用 CPU**
    ::
        通过 monkey.patch 修改 python 自带的一些标准库，处理所有底层细节
        当一个 greenlet 遇到 IO 阻塞时，gevent 自动切换到其他的 greenlet 执行
        等到 IO 操作完成时又在适当的时候切换回来运行
        保证总有 greenlet 在运行，而不是等待 IO
    **基于 IO 切换**
    ::
        Web App 代码不需要引入 gevent 包，也不需要改任何代码
        仅仅在部署的时候，用一个支持 gevent 的 WSGI 服务器，立刻就获得了数倍的性能提升
.. code-block:: python

    import gevent
    from gevent import monkey
    monkey.patch_socket()
    # monkey.patch_all()

    def func(n):
        for i in range(n):
            print(gevent.getcurrent(), i)

    def IO_func(n):
        for i in range(n):
            print(gevent.getcurrent(), i)
            gevent.sleep(0)  #: 交出控制权，使程序交替执行
    for g in [gevent.spawn(func, i) for i in range(2, 4)]: g.join()
    print("*" * 20)
    gevent.joinall([gevent.spawn(IO_func, i) for i in range(2, 4)])
    """
    <Greenlet at 0x7f0b48226cc0: func(2)> 0
    <Greenlet at 0x7f0b48226cc0: func(2)> 1
    <Greenlet at 0x7f0b48226df0: func(3)> 0
    <Greenlet at 0x7f0b48226df0: func(3)> 1
    <Greenlet at 0x7f0b48226df0: func(3)> 2
    ********************
    <Greenlet at 0x7f0b48226e88: IO_func(2)> 0
    <Greenlet at 0x7f0b48226f20: IO_func(3)> 0
    <Greenlet at 0x7f0b48226e88: IO_func(2)> 1
    <Greenlet at 0x7f0b48226f20: IO_func(3)> 1
    <Greenlet at 0x7f0b48226f20: IO_func(3)> 2
    """
