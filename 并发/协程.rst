协程
====
    - 在 **1** 个线程内开启多个任务，但一次只顺序执行一个
    - 等到所执行的任务遭遇阻塞，就切换到下一个任务继续执行，以期节省下阻塞所占用的时间
    - 协程的调度对于内核来说是不可见的（由程序语言控制）
    - 协程间是协同调度的，这使得并发量在上万的时候，协程的性能远高于线程
    :优点:
        :可读性更好:
            - 协程接口是异步的，但是代码是流畅（顺序）的，并没有被异步和回调打乱
            - 协程会把异步的事件和回调封装起来，形成调用接口
        - 可以通过控制函数调用的层次来进一步降低协程耗费资源的大小
        - ``高并发 + 高扩展性 + 低成本``
    :缺点:
        - 和 ``python`` 线程一样，无法利用多核优势
        - 需要自己来做调度，代码比较复杂
        - 进行阻塞操作（如 **IO** ）时会阻塞掉整个程序
    :调度方式: 协作式多任务


stackless
----------
    - Python 的微线程（tasklet）扩展
    - 低开销（切换开销远远小于系统线程）、轻量
    - 并发性能比其他方案快上几十倍
    - channel 机制，实现简单


greenlet
--------
    性能仅次于 stackless （大致慢一倍）