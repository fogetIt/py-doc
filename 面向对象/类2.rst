实例
====


类的实例化
---------
    - 类创建内存对象的过程
        1. :``__new__(cls, ...)``:
            - 新式类才有 ``__new__``
            .. code-block:: python

                class C: pass
                class D(object): pass
                print(hasattr(C, "__new__")) #: False
                print(hasattr(D, "__new__")) #: True
            :构造方法:
                - 在进行初始化之前，检查缓存中是否存在对应的实例对象
                    - 如果存在
                        - 将缓存中存放的对象直接返回
                    - 如果不存在
                        - 创建并返回实例
                            - 至少要有一个参数 ``cls`` ，代表要实例化的类
                                - ``cls`` 在实例化时由解释器自动提供
                            - 一定要有返回，返回 ``cls`` 的实例
                                - 否则 ``__init__`` 将不会被调用
                        - 将实例对象放至缓存中，供下次使用
        #. :``__init__(self, ...)``:
            :初始化的方法:
                - 在构造实例之后执行
                    - 至少要有一个参数 ``self`` ，代表要实例
                    - 可以接收实例成员变量（实例化时接收传参）
                    - 不能 ``return``
    - 多继承
        - 默认
            - 调用直接父类的 ``__new__`` 来构造类的实例
            - 调用直接父类的 ``__init__`` 来初始化实例
        - 如果父类没有重写 ``__new__`` 或 ``__init__``
            - 继续追溯父类，直到 **object** 的 ``__new__`` 或 ``__init__``
            - 可以重写 ``__new__`` 或 ``__init__`` 指定调用方式


实例方法
-------
    :self:
        - 类的函数比正常函数多一个额外的第一参数 **self** （惯例）
        - 代表 **调用时的** 类的实例
        - 自动转化 ``instance.method(*arg, **kwargs) -> Cls.method(instance, *arg, **kwargs)``
    :绑定:
        - 使用实例访问实例方法时，方法是绑定的
        - 使用类名访问实例方法时，方法是未绑定的 ``<unbound method Cls.func>``
        - 调用非绑定方法
            :手动绑定实例和方法:
                - 需要传递一个实例对象作为参数： ``Cls.method(instance, *arg, **kwargs)``
                - 比如：调用一个还没有任何实例的类中的方法
                .. code-block:: python

                    ClsName.__init__(self, *args, **kwargs)
                    super(ClsName, self).__init__(*args, **kwargs)


类属性/实例属性
-------------
    ======  ==================================  ==============
    实例       类的不可变属性                        类的可变属性
    ======  ==================================  ==============
    访问       可以                                可以
     -        如果实例有同名属性，访问实例属性         如果实例有同名属性，访问实例属性
    删除       不可以                              不可以
     -        如果实例有同名属性，删除实例属性         如果有同名实例属性，删除实例属性
    修改       不可以                              可以
     -        只会创建同名实例属性
    覆盖       不可以                              不可以
    ======  ==================================  ==============
    - 类属性的修改会影响到所有的实例
    .. code-block:: python

        A.name = 'class name'
        A.func = lambda cls, x: x ** 2

    - 给实例绑定属性、方法，不会影响到类和其它实例
    .. code-block:: python

        from types import MethodType
        a = A()
        a.name = 'instance name'
        a.func = MethodType(lambda self, x: x ** 2, a)
