自省，程序在运行时能够获得对象的类型
===============================

##### `python`之禅
```python
import this
```

##### doc strings
函数、模块和类的第一个逻辑行的字符串

##### ipython
```python
import flask
flask?
```

##### issubclass(C, B) -> bool
- 判断类参数`C`是否是类型参数`B`的子类
- 参数`B`可能是元组
- e.g.
    ```python
    print(issubclass(bool, int))  # bool 是 int 的子类
    ```

##### isinstance(object, class-or-type-or-tuple) -> bool
```python
class A: pass
a = A()
print isinstance(a, A)      # 判断实例是否属于类
print isinstance('a', str)  # 判断对象是否是一个已知的类型
print type(a)               # <type 'instance'>
```

##### callable(object) -> bool
- 判断一个对象是否可以被调用
- e.g.
    ```python
    print callable('a string')   # False
    print callable('dir')        # False
    print callable(lambda x: x)  # True
    ```

##### type
- type(object) -> the object's type
- type(name, bases, dict) -> a new type

##### [magic-attr](../api/magic-attr.md)
##### [LEGB](./LEGB.md)

##### sys.modules
- 包含一个由当前载入(完整且成功导入)到解释器的模块组成的字典,
    + 模块名作为键, 它们的位置作为值
    + e.g.
        ```python
        import sys
        print sys.modules.keys()
        ```

##### help
```python
"""
help(module.attr)
查看模块、对象的属性、方法
"""
help('modules')   # 列出所有已安装模块
help('keywords')  # 列出所有关键字 
help('modules keywords')

"""
进入help交互式
q 退出
输入 list、keywords 等，可以查看对象信息
"""
help()
```

##### 关键字
```python
import keyword
print keyword.kwlist
print keyword.iskeyword('and')
```

##### 对象属性
- dir([object]) -> list of strings
    + 返回的对象的`所有`属性名列表
        * 不论对象是否具有`__slots__`
        * 自动寻找一个对象的`所有`属性：实例、类和它的父对象的属性
    + e.g.
        ```python
        # 文件属性（当前模块中定义的方法名称列表）
        print(dir())
        # 类属性（模块或者类内部的所有方法）
        print(dir(Cls))
        # 实例属性
        print(dir(instance))
        # 列出所有内建方法
        print(dir(__builtins__))
        ```
- object.__dict__
    + 返回对象的属性名、属性值字典
        * e.g.
            ```python
            print(__builtins__.__dict__)
            ```
    + `__dict__`仅仅是局部属性集合，不包含所有有效属性
    + 动态地向`__dict__`添加或删除属性
        * e.g.
            ```python
            class A(object):
                def __init__(self):
                    self.__dict__.update(...)
            a = A()
            a.arg = '...'
            a.__dict__.update(...)
            ```
    + 对象的属性查找顺序：实例`__dict__`——>类`__dict__`——>父类`__dict__`
        * 实例的`__dict__`属性仅仅是那个实例的局部属性集合
        * 对一个类设置属性时，它的实例的`__dict__`也会受到影响
        * 对一个实例设置属性时，它所属的类的`__dict__`不受影响
    + [__slots__](../api/magic-attr.md)
        * 如果一个类中添加了`__slots__`，那么这个`类的实例`将不会拥有`__dict__`
        * 许多内建类型（例如`list`）都没有`__dict__`属性

##### pprint
- pprint(object, stream=None, indent=1, width=80, depth=None)
    + stream
        * 输出流对象，默认是`sys.stdout`
    + indent
        * 缩进
    + width
        * 最大行宽
    + depth
        * 打印的深度
- e.g.
    ```python
    from pprint import pprint
    print(__builtins__.__dict__)
    pprint(__builtins__.__dict__, indent=2)
    ```