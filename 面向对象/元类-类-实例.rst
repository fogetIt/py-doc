对象
==============
- 可以赋值给一个变量
- 可以拷贝
- 可以增加属性
- 可以作为函数参数进行传递


**元类 ---> 类 ---> 实例**


元类
============
- **控制类的创建行为** 的类
    - 类会调用元类来进行初始化
- 所有类的默认元类是 **type**
    - 定义元类

        .. code-block:: python

            class MetaClass(type):
                """（1）"""
                def __new__(cls, name, bases, attrs):
                    # ...
                    return type.__new__(name, bases, attrs)


            def MetaClass(name, bases, attrs):
                """（2） __metaclass__ 可以被任意调用，并不需要一个正式的类"""
                # ...
                return type(name, bases, attrs)
    - 指定元类

        .. code-block:: python

            class New(object): __metaclass__ = MetaClass  #: python2
            # __metaclass__ 属性也可以写在父类中
            class New(object, metaclass=MetaClass): pass  #: python3


类
==============
- 一组用来描述如何生成一个对象的代码段
- 拥有创建对象（实例）的能力
- 类也是对象，可以在运行时动态地创建
- 创建类

    :一个标准的类定义:
        :``new_class = metaclass(name, bases, attrs)``:

            .. code-block:: python

                Cls = type('Cls', (object,), {"a": 1})
        1. 收集所有属性到 **__dict__** 字典中
        #. 当类定义结束， **python** 将决定类的 元类_
        #. 实例化元类，创建类对象


----------


实例
==========


实例方法
-------------------------

:self: 类的函数比正常函数多一个额外的第一参数 **self** （惯例），代表 **调用时的** 类的实例

    :自动绑定实例: ``instance.method(*arg, **kwargs) -> Cls.method(instance, *arg, **kwargs)``
:绑定:
    - 使用实例访问实例方法时，方法是绑定的
    - 使用类名访问实例方法时，方法是未绑定的 ``<unbound method Cls.func>``
    - 调用非绑定方法
        :手动绑定实例和方法:
            :需要传递一个实例对象作为参数: ``Cls.method(instance, *arg, **kwargs)``
            - 比如：调用一个还没有任何实例的类中的方法

                .. code-block:: python

                    Cls.__init__(self, *args, **kwargs)
                    super(Cls, self).__init__(*args, **kwargs)


类属性/实例属性
-------------------------------
======  ==================================  ==============
实例       类的不可变属性                        类的可变属性
======  ==================================  ==============
访问       可以                                可以
 -        如果实例有同名属性，访问实例属性         如果实例有同名属性，访问实例属性
删除       不可以                              不可以
 -        如果实例有同名属性，删除实例属性         如果有同名实例属性，删除实例属性
修改       不可以                              可以
 -        只会创建同名实例属性
覆盖       不可以                              不可以
======  ==================================  ==============
- 类属性的修改会影响到所有的实例

    .. code-block:: python

        Cls.name = 'class name'
        Cls.func = lambda cls, x: x ** 2

- 给实例绑定属性、方法，不会影响到类和其它实例

    .. code-block:: python

        from types import MethodType
        c = Cls()
        c.name = 'instance name'
        c.func = MethodType(lambda self, x: x ** 2, c)
