查看方法、类所属的模块名称
----------------------
    .. code-block:: python

        from os import open
        print(open.__module__) #: posix
        print(str.__module__)  #: __builtin__

        class C: pass
        def func(): pass
        c = C()
        print(c.__module__)    #: __main__
        print(C.__module__)    #: __main__
        print(func.__module__) #: __main__


查看类的属性字典
--------------
    .. code-block:: python

        import os
        class C:
            def func(self): pass
        print(os.__dict__) # ...
        print(C.__dict__)  # {'__module__': '__main__', '__doc__': None, 'func': <function func at ...>}


查看文档字符串
-------------
    .. code-block:: python

        """module doc"""
        import os
        def func:
            """func doc"""
            pass
        class C:
            """class doc"""
            pass
        print(__doc__)       #: module doc
        print(func.__doc__)  #: func doc
        print(class.__doc__) #: class doc


查看对象名称
----------
    .. code-block:: python

        import os
        class C:
            def __init__(self):
                print(self.__class__.__name__) #: C
        def func(): pass
        c = C()
        print(__name__)                        #: __main__
        print(os.__name__)                     #: os
        print(func.__name__)                   #: func
        print(C.__name__)                      #: C
        print(c.__class__.__name__)            #: C
        print(type('').__name__)               #: str
    - 判断是直接执行还是导入执行
        :**import xxx**: ``__name__ == 文件名``
        :**python xxx.py**:
            - 直接运行模块
            - ``__name__ == "__main__"``



查看父类
--------
    .. code-block:: python

        class A(object): pass
        class B(A): pass
        class C(A): pass
        class D(B, C): pass
        # 直接父类对象的元组，不包含继承树更上层的类
        print A.__bases__  # (<type 'object'>,)
        print B.__bases__  # (<class '__main__.A'>,)
        print C.__bases__  # (<class '__main__.A'>,)
        print D.__bases__  # (<class '__main__.B'>, <class '__main__.C'>)
        print D.__base__   # <class '__main__.B'>
        print issubclass(D, A)  # True


查看实例的类对象
--------------
    - ``obj.__class__ == == type(obj)``
    .. code-block:: python

        class C: pass
        c = C()
        print(c.__class__) #: <class '__main__.C'>
        print(C.__class__) #: <class 'type'>


查看模块路径
----------
    .. code-block:: python

        import os, sys, time
        print(__file__)      #: 返回当前文件路径
        print(os.__file__)   #: /usr/lib/python2.7/os.pyc
        # 某些内建模块没有 __file__ 属性
        print(sys.__file__)  #: AttributeError
        print(time.__file__) #: AttributeError


限制实例添加属性
--------------
    .. code-block:: python

        class C: __slots__ = ('a', )    #: 允许添加 ('a', )
        class D(C): __slots__ = ('b', ) #: 允许添加 ('a','b')
        class E(C): pass                #: 无限制
    - 使用 **__slot__** 的对象节省了一部分开销


判断方法绑定在哪个实例上
---------------------
    .. code-block:: python

        class C:
            def func(self): pass

        c = C()
        print(c.func.__self__) #: <__main__.C instance at ...>  #: python2
                               #: <__main__.C object at ...>    #: python3

指定元类
-------
    .. code-block:: python

        class C: __metaclass__ = MetaClass
